<snippet>
    <content><![CDATA[
namespace ${1:Namespace};

use LaravelEnso\DataTable\app\Classes\TableStructure;

class ${2:Class} extends TableStructure
{

    public function __construct()
    {
        \$this->data = [
            ${3:${4:/* The table name that will be shown in front end
             * It will be also used as the file name if the excel export is called
             */}
            'tableName' => '${5:Table}',}
            ${6:${7:/* current number for each line, with the header name
             * If given, it will be appended as the first column of the table
             */}
            'crtNo'         => '${8:app.crtNo}',}
            ${9:${10:/* column for buttons with available actions. Used for both standard
             * actions - create, view, edit, delete - and custom actions.
             * Note: the buttons for standard actions are added automatically depending
             * on permissions and do not need to be specified here or elsewhere.
             */}
            'actionButtons' => '${11:app.actions}',}
            ${12:${13:/* list of action buttons for custom actions
             * cssSelectorClass is used for adding the button event listener
             * cssClass is used for styling the custom button
             * event is the event triggered by the button
             * route is OPTIONAL, and if given, it will be checked for permission i.e. if the user doesn't have
             * the necessary permission, that specific button is not drawn
             */}
            'customActionButtons'     => [
                [ 'cssClass' => '${14:btn-success fa fa-info-circle}', 'event'=>'${15:custom-event}'${16:, 'route' => '${17:route.getData}'} ]
            ],}
            ${18:${19:/* columns where custom rendering is applied
             * Note: a 'customRender' method needs to exist in the parent vue instance
             */}
            'render'        => [ ${20:columnIndexArray} ],}
            ${21:${22:/* column number where the total value is displayed
             * and the table's column name used in the query, to compute the total
             */}
            'totals'        => [ ${23:columnIndexArray} ],}
            ${24:${25:/* computed responsive priority will be 1 for first column
             * and will increment with one for each consecutive column
             */}
            'responsivePriority' => [ ${26:columnIndexArray} ],}
            ${27:${28:/* list of columns that are not searchable,
             * such as columns that are translated */}
            'notSearchable' => [ ${29:columnIndexArray} ],}
            ${30:${31:/* list of columns that you don't want to be sortable */}
            'notSortable' => [ ${32:columnIndexArray} ],}
            ${33:${34:/* list of editable columns
             * Note:  the $editableModel parameter is needed, and
             * only attributes of this model are editable i.e. you can't
             * edit attributes of 'joined' models/tables
             */}
            'editable' => [ ${35:columnIndexArray} ],}
            ${36:${37:/* if none is given, by default, 'lfrtip' is used.
             * See datatables.net documentation */}
            'dom' => '${38:lBfrtip}',}
            ${39:/* table header alignment. The dt-head-* class is used,
             * i.e. dt-head-center in this example  */}
            'headerAlign'        => '${40:left} ${41:center} ${42:right}',
            ${43:/* table body alignment. The dt-body-center class is used in this example
             */}
            'bodyAlign'        => '${44:left} ${45:center} ${46:right}',
            ${47:${48:/* custom classes for the <table> element */}
            'tableClass'         => '${49:custom-class}',}
            ${50:${51:/* array of columns whose values should be displayed translated.
            * Note: in order to work it needs a ColumnEnum class
             */}
            'enumMappings' => [
                '${52:status}' => '${53:StatusesEnum}',
            ],}
            ${54:/* configuration of the columns to be displayed
             */}
            'columns' => [
                0 => [
                    'label' => '${55:labelName}',
                    'data' => '${56:attributeName}',
                    'name' => '${57:attributeSource}',
                    ${58:'class' => '${59:className}',}
                ],
            ]
        ];
    }
}]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>tableStructure</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.php</scope>
</snippet>